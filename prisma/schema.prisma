// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)

  authorId  Int?
  reviewsId Int?

  author  User?   @relation(fields: [authorId], references: [id])
  reviews Review? @relation(fields: [reviewsId], references: [id])

  @@map(name: "post")
}

model Order {
  id    Int         @id @default(autoincrement())
  user  User?       @relation(fields: [user_id], references: [id])
  items OrderItem[]

  userId    Int?
  reviewsId Int?

  reviews Review? @relation(fields: [reviewsId], references: [id])

  @@map(name: "order")
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float

  order_id   Int?
  product_id Int?

  products Product? @relation(fields: [product_id], references: [id])
  order    Order?   @relation(fields: [order_id], references: [id])

  @@map(name: "order_item")
}

model Product {
  id    Int    @id @default(autoincrement())
  name  String
  price Float

  orderItems OrderItem[]

  @@map(name: "product")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  // user : MultipleRecords[]
  posts   Post[]
  orders  Order[]
  reviews Review[]

  @@map(name: "user")
}

model Review {
  id              Int      @id @default(autoincrement())
  rating          Int?
  body            String?  @unique
  createdAt       DateTime @default(now()) @map(name: "created_at")
  dateLastUpdated DateTime @updatedAt @map(name: "updated_at")
  numIsHelpful    Int      @default(autoincrement()) @map(name: "num_is_helpful")

  productId Product? @relation(fields: [id], references: [id])
  userId    User?    @relation(fields: [id], references: [id])

  orders Order[]

  @@map(name: "review")
}
